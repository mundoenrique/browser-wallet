'use client';

import 'dayjs/locale/es';
import dayjs from 'dayjs';
import { Controller } from 'react-hook-form';
import Info from '@mui/icons-material/InfoOutlined';
import { DesktopDatePicker } from '@mui/x-date-pickers';
import { FormHelperText, InputLabel } from '@mui/material';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
//Internal App
import { CalendarIcons } from '%/Icons';
import { InputDatePickerProps } from '@/interfaces';

function DatePickerMUI(props: InputDatePickerProps): JSX.Element {
  const {
    name,
    label,
    labelError,
    error,
    onChange,
    value,
    views,
    format,
    disabled,
    readOnly,
    datePickerProps,
    ...restProps
  } = props;

  const inputLabel = label ?? name;

  return (
    <>
      <InputLabel sx={{ mb: 3 / 2 }}>{label}</InputLabel>
      <LocalizationProvider dateAdapter={AdapterDayjs} adapterLocale={'es'}>
        <DesktopDatePicker
          slots={{ openPickerIcon: CalendarIcons }}
          disabled={disabled}
          readOnly={readOnly}
          slotProps={{
            textField: {
              error: !!error,
            },
            field: {
              disabled: true,
            },
          }}
          label={inputLabel}
          value={value}
          onChange={onChange}
          views={views}
          format={format ? format : 'DD/MM/YYYY'}
          sx={{
            width: '100%',
            '&>.MuiFormLabel-root': { display: 'none' },
            '&>.MuiInputBase-root': { pr: 0 },
            '&>.MuiInputBase-root>.MuiInputAdornment-root>.MuiButtonBase-root': {
              borderRadius: '50%',
              bgcolor: 'secondary.light',
              color: 'primary.main',
              mr: 3 / 2,
              p: '4px',
            },
            '&>.MuiInputBase-root.MuiOutlinedInput-root.Mui-disabled': {
              background: 'white',
              color: 'inherit',
              '&>input': {
                textFillColor: 'initial',
              },
            },
          }}
          {...datePickerProps}
          {...restProps}
        />
        <FormHelperText
          sx={{ color: 'error.main', height: 20, ml: 0, display: 'flex', alignItems: 'center' }}
          id={`${label}-helperText`}
        >
          {error ? (
            <>
              <Info fontSize="small" sx={{ mr: 1 }} /> {error.message}
            </>
          ) : (
            <>{labelError || ''}</>
          )}
        </FormHelperText>
      </LocalizationProvider>
    </>
  );
}

/**
 * The Date Picker component lets users select a date.
 *
 * @param name - Name of the field - React Hook Form.
 * @param control - Object provided by the useForm method - React Hook Form.
 * @param onChange - Detect the change in the date.
 * @param format -  The date format in the user interface. The value of the links will always be in the format YYYY-MM-DD.
 * @param restProps - Property used to bring the rest of the component's properties.
 * @returns The value assigned to datepicker.
 * @throws If there is an error in any field that does not comply with the regular expressions.
 * @remarks
 * It is recommended to use the "dayjs" library to modify the value generated by the datepicker.
 * @label React Hook Form - {@link https://react-hook-form.com/docs/useform/control}
 * @label Material UI - {@link https://mui.com/x/react-date-pickers/date-picker/}
 * @label dayjs - {@link https://www.npmjs.com/package/dayjs}
 */
export default function InputDatePicker(props: InputDatePickerProps): JSX.Element {
  const { name, control, onChange, datePickerProps, ...restProps } = props;

  return (
    <>
      {control ? (
        <Controller
          name={name}
          control={control}
          render={({ field, fieldState: { error } }) => (
            <DatePickerMUI
              name={name}
              value={dayjs(field.value)}
              onChange={(e) => {
                field.onChange(e);
                onChange && onChange(e);
              }}
              error={error}
              datePickerProps={datePickerProps}
              {...restProps}
            />
          )}
        />
      ) : (
        <DatePickerMUI name={name} onChange={onChange} {...restProps} datePickerProps={datePickerProps} />
      )}
    </>
  );
}
